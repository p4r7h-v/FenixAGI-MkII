[
    {
        "purpose": "Search the web for information",
        "code": "To search the web for information, we need a web scraping tool. Python has a library called 'requests' to send HTTP requests and 'BeautifulSoup' for parsing HTML and XML documents. \n\nNote: Web scraping should be performed responsibly and many websites have a policy against it. Always check a website\u2019s \u201crobots.txt\u201d before proceeding.\n\nUnfortunately, there is no direct way to search the entire web for information due to the fact that would involve going against the terms of service of many websites. The best course of action would be to write a specific function based on the website's API that you are interested in.\n\nAs an example, I can write a simple function for you which will get all the links from a given webpage using 'requests' and 'BeautifulSoup':\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef search_web(url):\n    try:\n        response = requests.get(url) # Send a GET request to the webpage\n        if response.status_code != 200: # If request was unsuccessful\n            return \"Failed to get the webpage\"\n\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        links = soup.find_all('a') # Find all anchors\n\n        link_list = [link.get('href') for link in links]\n        return link_list\n\n    except Exception as e:\n        return str(e)\n```\n\nThis function will return a list of links from a webpage. The user inputs the URL for the page they want to scrape. Remember, this is just an example and actual usage will depend on a website's policy and the specific information you wish to collect.",
        "tokens_used": 365
    },
    {
        "purpose": "Send a text message",
        "code": "A Python function for sending a text message will involve using a service such as Twilio. Twilio is a cloud communications platform that allows software developers to programmatically make and receive phone calls, send and receive text messages, and perform other communication functions using its web service APIs.\n\nHere's a simplified example of what a function for sending a text message might look like with Twilio. Please note that you'll need to install the Twilio python library using pip and sign up for a free Twilio account to send text messages:\n\n```python\nfrom twilio.rest import Client\n\ndef send_text_message(to_number, from_number, message_body):\n    account_sid = 'Your-Twilio-Account-SID'\n    auth_token = 'Your-Twilio-Auth-Token'\n    client = Client(account_sid, auth_token)\n    \n    message = client.messages.create(\n        body=message_body,\n        from_=from_number,\n        to=to_number \n    )\n    print(f'Sent message {message.sid}')\n```\n\nThe above function accepts three arguments:\n\n- 'to_number': The phone number to which the text is to be sent.\n- 'from_number': The Twilio phone number from which the text is to be sent\n- 'message_body': The body of the text message.\n\nBefore calling this function, make sure to replace `Your-Twilio-Account-SID` and `Your-Twilio-Auth-Token` with your actual Twilio Account SID and Auth Token.\n\nYou can call the function using:\n\n```python\nsend_text_message(\"+12345556789\", \"+09876543211\", \"Hello, this is a test message!\")\n```\n\nPlease replace the above numbers with valid and real phone numbers as per your Twilio account. Also, note that the numbers are written in E.164 formatting.\n\nRemarks:\nPlease remember text messages are not free and you'll be billed by Twilio per SMS you send.",
        "tokens_used": 430
    },
    {
        "purpose": "Set a reminder",
        "code": "Here is a basic function using Python, it lets you set a reminder which will alert you on command line after a specific duration. \n\n```python\nimport time\nimport os\n\ndef set_reminder(seconds, message):\n    time.sleep(seconds)\n    print(\"\\a\") # This will generate a system beep.\n    print(f'Reminder: {message}')\n\n# Usage example:\n# set_reminder(5, 'Take a break from coding!')\n```\n\nNote: \n1. The input 'seconds' is the duration after which you want to be reminded.\n2. This is a blocking function, means the execution of rest of your program will be blocked until time.sleep() has done sleeping. \n3. The notification is very basic, it's based on system beep and terminal output.\n\nIf you want a more advanced system-based notifications, a third party library like plyer would be needed which supports cross platform notifications. Here is how you can do it:\n\n```python\nfrom plyer import notification \nimport time\n\ndef set_reminder(seconds, title, message):\n    time.sleep(seconds)\n    notification.notify( \n        title = title,\n        message = message, \n        timeout = 10\n    )\n\n# Usage example:\n# set_reminder(5, 'Reminder', 'Take a break from coding!')\n```\n\nNote: \n1. In order to run this program, you need to install plyer using `pip install plyer`.\n2. The method `notification.notify()` is used to create a system notification. The `title` parameter specifies the title of the notification, the `message` parameter specifies the content of the notification, and the `timeout` parameter specifies the duration to show the notification before it disappears.",
        "tokens_used": 389
    },
    {
        "purpose": "Play music",
        "code": "Sure! To play music in Python, you can use a module like pygame. Pygame allows us to play sounds such as wav or mp3 files. Here is a simple Python function that does this:\n\n```python\nimport pygame\n\ndef play_music(filename):\n    '''\n    Function to play music file\n    filename: string, music file's name (\"example.mp3\")\n    '''\n    pygame.mixer.init()\n    pygame.mixer.music.load(filename)\n    pygame.mixer.music.play()\n```\nPlease note that you need to have Pygame installed in your Python environment. If you haven't installed it yet, you can use the following command:\n\n```bash\npip install pygame\n```\n\nYou can call the function like so:\n\n```python\nplay_music('your_audio_file.mp3')\n```\n\nRegarding the filename argument, you need to either provide the full path to the location of the file, or have the file in the same location as the python script.\n\nAs the pygame would open a separate thread to play the music and close it once music is done, or when main thread has finished. For continuous playing or wait till music has finished, you need to add delay or pygame.event.wait() at the end of script.\n\nFor file types other than wav and mp3, other libraries might be required, like playsound, simpleaudio etc.",
        "tokens_used": 307
    },
    {
        "purpose": "Get current weather information",
        "code": "To get current weather information, typically you'd use an API. One of the most common is OpenWeatherMap. Here's an example function. You'll need an API key (which is free, but requires an account at https://home.openweathermap.org/users/sign_up)\n\n```python\nimport requests\nimport json\n\ndef get_current_weather(city, api_key):\n    base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n    params = {\n        'q': city,\n        'appid': api_key,\n        'units': 'metric'\n    }\n    response = requests.get(base_url, params=params)\n    weather_data = response.json()\n\n    if response.status_code == 200:\n        main_weather = weather_data['weather'][0]['main']\n        description = weather_data['weather'][0]['description']\n        temp = weather_data['main']['temp']\n        humidity = weather_data['main']['humidity']\n        return f\"Weather in {city} is '{description}' with temperature {temp} degree celsius and humidity {humidity}%\"\n    else:\n        return f\"Error getting weather: {weather_data['message']}\"\n```\n\nYou can call this function with the name of the city and your API key as parameters like this:\n\n```python\nprint(get_current_weather('Sydney', 'your-api-key'))\n```\n\nPlease replace `'your-api-key'` with actual API key. This function will return the main weather description, temperature in celsius and humidity percent.\n\nNOTE: This will retrieve the weather for cities, so make sure the city you're searching for is distinct. It might have trouble differentiating between cities with the same name in different countries.\n\nAlso there are limitations on the free account usage, like 60 requests per minute etc. For more details please check the API usage details here: https://openweathermap.org/price",
        "tokens_used": 419
    },
    {
        "purpose": "Create a new document",
        "code": "Sure, I'll provide you with a sample Python function that creates a new text file named `new_document.txt`. Please note that this function will overwrite any existing files of the same name in the directory where the code is executed.\n\n```python\ndef create_new_document(filename):\n    try:\n        f = open(filename, \"w\")    # Open the file in 'write' mode.\n        f.close()                   # Close the file.\n        print(f\"{filename} has been created successfully.\")\n    except:\n        print(\"An error occurred while creating the file.\")\n\n# Usage\ncreate_new_document('new_document.txt')\n```\nIn this function, `filename` is the parameter/argument which specifies the name of the file to be created.\n\nAlso, to handle possible errors, the creation of the file is done inside a `try` block, and if an error occurs, a message will be printed.\n\nKeep in mind that this function creates a blank text document. If you want to write some initial content into the document, you could modify the function as follows:\n\n```python\ndef create_new_document(filename, content):\n    try:\n        f = open(filename, \"w\")    # Open the file in 'write' mode.\n        f.write(content)            # Write the content in the file.\n        f.close()                   # Close the file.\n        print(f\"{filename} has been created successfully.\")\n    except:\n        print(\"An error occurred while creating the file.\")\n\n# Usage\ncreate_new_document('new_document.txt', 'Hello, this is a new document!')\n```",
        "tokens_used": 359
    },
    {
        "purpose": "Get directions",
        "code": "To get directions, you can use a number of APIs. In this example, I will use Google Maps Directions API. You first need to import the googlemaps module. If it's not installed, run 'pip install -U googlemaps' in your terminal. \n\nNote: Make sure to replace 'YOUR_API_KEY' with your actual key. \n\n```python\nimport googlemaps\n\ndef get_directions(start_location, end_location):\n    gmaps = googlemaps.Client(key='YOUR_API_KEY')\n    directions_result = gmaps.directions(start_location, end_location)\n\n    for i in range(len(directions_result[0]['legs'][0]['steps'])):\n        print(str(i+1) + \". \" + directions_result[0]['legs'][0]['steps'][i]['html_instructions'])\n        print()\n\nstart = \"Times Square\"\nend = \"Central Park\"\n\nget_directions(start, end)\n```\n\nThis function takes the start and end locations as parameters, uses Google Maps Directions API to get the directions, and prints out each step. Remember to replace 'YOUR_API_KEY' with your actual Google Maps API key.\n\nNote: This function only prints the basic text directions. It doesn't take into account options like transportation mode or waypoints.\nPlease follow Google's documentation on this topic for more specifics: https://developers.google.com/maps/documentation/directions/start\n\nThough, in a production setting, you should ideally not print the steps in your function, but return them in a structured way.",
        "tokens_used": 341
    },
    {
        "purpose": "Set an alarm",
        "code": "Sure, we will use the `datetime` and `winsound` libraries to set up an alarm. You just need to set the time for the alarm as function argument. Note that the function only works on Windows given that it uses `winsound`. The replacement for other operating systems would be the `os` library.\n\n```python\nimport datetime\nimport time\nimport winsound\n\ndef set_alarm(alarm_time):\n    while True:\n        time.sleep(1)\n        current_time = datetime.datetime.now().time()\n        current_time = current_time.strftime(\"%H:%M:%S\")\n        if current_time == alarm_time:\n            for i in range(30): # Alarm sound will play for 30 seconds\n                winsound.Beep(500, 1000) # 500 Hz for 1 second\n            break\n\n# Example usage:\n# set_alarm(\"12:00:00\") # Set alarm at 12:00:00 PM\n```\nIn this function, it continuously checks the current time. Once the current time equals the given alarm time, the alarm will go off. The winsound.Beep(500, 1000) generates a beep sound that operates at 500 Hz for 1 second. By default, this program uses a 24-hour time format. Change the alarm time according to this format.",
        "tokens_used": 313
    },
    {
        "purpose": "Translate text",
        "code": "To translate texts, we can use 'translate' method from 'googletrans' module. Here is a simple Python function that translates input text to a specified language:\n\nNote: You'll need to install googletrans library if it is not available. You can install it using pip:\n`pip install googletrans==4.0.0rc1`\n\n```python\nfrom googletrans import Translator\n\ndef translate_text(input_text, dest_language):\n    \"\"\" Translates a string `input_text` to the language indicated by the string `dest_language`. \n\n    Parameters: \n    input_text (str): The string to translate \n    dest_language (str): The language you want to translate to\n\n    Returns: \n    str: The translated string\n    \"\"\"\n    translator = Translator()\n    translated = translator.translate(input_text, dest=dest_language)\n    return translated.text\n```\n\nThe function `translate_text(input_text, dest_language)` uses the googletrans library to translate the given `input_text` to the language specified by `dest_language`. Googletrans uses Google Translate API so it supports same languages that Google Translate supports. The `dest_language` parameter expects an ISO 639-1 language code (for example \"es\" for Spanish, \"en\" for English, \"fr\" for French etc.)\n \nCall the function as follows:\n\n```print(translate_text(\"Hello, how are you?\", \"es\"))```\n\nPlease ensure that your usage complies with Google's policies, as creating an application making extensive use of Google Translate could potentially violate their terms of service. Commercial uses are typically not permissible without express authorization from Google.",
        "tokens_used": 368
    },
    {
        "purpose": "Make a phone call",
        "code": "In Python, you cannot directly make a phone call because it's a high-level programming language and doesn't have access to such low-level capabilities. However, Python can be used to write a script to make a phone call by using an API like Twilio. \n\nHere is an example of how you might do something like that:\n\n```python\nfrom twilio.rest import Client\n\ndef make_call(to_number, from_number, account_sid, auth_token):\n    client = Client(account_sid, auth_token)\n\n    call = client.calls.create(\n        to=to_number,   # enter number as \"+countryCodephoneNumber\"\n        from_=from_number,  # enter number as \"+countryCodephoneNumber\"\n        url=\"http://demo.twilio.com/docs/voice.xml\"\n    )\n\n    return call.sid\n```\n\nThis function creates a phone call from the `from_number` to the `to_number`. The `account_sid` and `auth_token` are your Twilio account details. The `url` parameter points to an XML document that Twilio fetches when the call is made to guide the interactive aspects of the call.\n\nPlease note: You need to input your own SID, Auth Token, To and From phone numbers. Also, you need to buy phone numbers and services from Twilio to make this work. The Twilio library can be installed with pip via `pip install twilio`. Additionally, Twilio isn\u2019t a free service, and charges will accrue if you make or receive phone calls. \n\nAlways follow the laws of your country related to automated phone calls.",
        "tokens_used": 359
    }
]