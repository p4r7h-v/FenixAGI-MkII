[{"purpose": "Scraping websites for data", "code": "For this purpose, we will need the help of Python libraries like requests and BeautifulSoup to scrape a webpage.\n\nHere's an example function that scrapes H1 titles from a website:\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    try:\n        # Send a http request to the website\n        page = requests.get(url)\n        # Parse content of the page with BeautifulSoup\n        soup = BeautifulSoup(page.content, 'html.parser')\n        # Get h1 titles from the parsed page content\n        headers = [h1.text for h1 in soup.select('h1')]\n\n        return headers\n    \n    except Exception as e:\n        return str(e)\n```  \n\nPlease use the function as follows:\n\n```python\nurl = \"https://www.the_website_url.com\"\nprint(scrape_website(url))\n```\n\nPlease replace 'https://www.the_website_url.com' with the actual website you want to scrape.\n\nNOTE: It's important to mention that before scraping a website, be sure to understand and respect its robots.txt file and its terms of use. Furthermore, some websites offer official APIs for data access which may be the better choice for data retrieval as opposed to scraping.", "tokens_used": 285}, {"purpose": "Simulating a game of chess", "code": "Sure, but keep in mind that simulating a game of chess is a complex task and involves many components like the board, the game rules, the pieces, piece movement rules, etc. Due to the complexity of the task, we will use the python-chess module, a library for chess rules and chess engine communication.\n\nLet's create an example where the game is played between two random moves selected by the AI:\n\n```python\nimport chess\nimport chess.svg\nimport random\n\ndef simulate_chess_game():\n    # Initialize an empty chess board\n    board = chess.Board()\n\n    while not board.is_game_over():\n        # Generate all legal moves\n        legal_moves = list(board.legal_moves)\n        \n        # Choose a random legal move\n        random_move = random.choice(legal_moves)\n\n        # Make the move on the board\n        board.push(random_move)\n\n        # Print the board to console\n        print(board)\n\n    # Announce the result\n    if board.is_checkmate():\n        print(\"Checkmate!\")\n    elif board.is_stalemate():\n        print(\"Stalemate!\")\n    elif board.is_insufficient_material():\n        print(\"Draw due to insufficient material!\")\n    elif board.is_seventyfive_moves():\n        print(\"Draw due to 75 moves rule!\")\n    elif board.is_fivefold_repetition():\n        print(\"Draw due to fivefold repetition!\")\n    elif board.is_variant_draw():\n        print(\"Draw due to variant-specific rules!\")\n    \n\n# Run the simulation\nsimulate_chess_game()\n```\n\nThis code will allow you to simulate a chess game in your console.\n\nPlease note that Python chess library is needed, you can install it via pip using the command:\n```\npip install python-chess\n``` \n\nAlso, if you're running this in a Python script, be sure to have the python-chess module imported at the top of your script.", "tokens_used": 425}, {"purpose": "Calculating Fibonacci sequences", "code": "Sure, here is a simple Python function that calculates Fibonacci sequences:\n\n```python\ndef calc_fibonacci(n):\n    if n <= 0:\n        return \"n should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence[-1]\n\n# Test the function\nprint(calc_fibonacci(10))\n```\n\nThis function calculates the Fibonacci sequence up to the nth term. The Fibonacci sequence is a series of numbers where a number is found by adding up the two numbers before it. For example, starting with 0 and 1, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, ...", "tokens_used": 239}, {"purpose": "Performing sentiment analysis on text", "code": "Performing sentiment analysis on text is not a simple task to accomplish within a single python function without dependencies. However, libraries such as TextBlob makes this quite easy. \n\nBelow is an example of how you can accomplish this using TextBlob:\n\n```python\n# Install necessary libraries first\n# !pip install textblob\n\nfrom textblob import TextBlob  \n\ndef perform_sentiment_analysis(text):\n    # create TextBlob object of passed text \n    blob = TextBlob(text) \n    return blob.sentiment  \n\n# testing the function\nprint(perform_sentiment_analysis(\"I love coding in Python.\"))\n```\n\nThis function, `perform_sentiment_analysis`, uses the TextBlob library to perform sentiment analysis on the input text. The `TextBlob.sentiment` property returns a namedtuple of the form `Sentiment(polarity, subjectivity)`. The polarity score is a float within the range [-1.0, 1.0]. The subjectivity is a float within the range [0.0, 1.0] where 0.0 is very objective and 1.0 is very subjective.\n\nHowever, it should be noted that TextBlob's sentiment analysis is based on a basic model and might not provide accurate analyses for complex texts or texts with nuanced sentiment. For more advanced sentiment analysis, machine learning or deep learning approaches may need to be used.", "tokens_used": 318}, {"purpose": "Generating a random password", "code": "Sure, here is a Python function which generates a random password. This passwords has a length of 10, and contains a mix of uppercase and lowercase letters, and numbers:\n\n```python\nimport random\nimport string\n\ndef generate_password(length=10):\n    # Combine all types of characters we want in the password\n    all_characters = string.ascii_letters + string.digits\n\n    # Use random.sample to ensure all characters in the password are unique,\n    # then use .join to combine the characters into a single string.\n    password = ''.join(random.sample(all_characters, length))\n    \n    return password\n\nprint(generate_password())\n```\n\nWith this function, you can also specify a different length for the password by providing an argument when calling generate_password(), like so:\n```python\nprint(generate_password(15))\n```\nThis will generate and print a random password of length 15.", "tokens_used": 222}, {"purpose": "Encrypting a message with a simple cipher", "code": "Sure. Here's a simple Python function for encrypting a message using Caesar cipher. It's one of the simplest and most widely known encryption techniques where each letter in the plaintext is shifted a certain number of places down the alphabet.\n\n```python\ndef caesar_cipher_encrypt(message: str, shift: int) -> str:\n    encrypted_text = \"\"\n    for char in message:\n        if char.isalpha():  # check if character is an alphabet\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            encrypted_text += encrypted_char\n        else:\n            encrypted_text += char  # non-alphabet characters are not encrypted\n    return encrypted_text\n```\nThis function takes a message as a string and a shift as an integer. The shift is the number of positions to shift each character in the message to encrypt it. \n\nFor example, if you call `caesar_cipher_encrypt('abc', 3)`, it will return `'def'`. This is because a, b, and c have been shifted 3 places down the alphabet to d, e, and f respectively. \n\nNote: This function only works with English alphabet characters; non-alphabet characters are not encrypted and kept as is. This is just a simple cipher and not suitable for securing sensitive information.", "tokens_used": 332}, {"purpose": "Implementing a simple search engine", "code": "A Python approach to creating a simple search engine could start by assuming a data source, for example a list of strings (or documents). It will check a query against each document, and return the items containing the query. Here is a very basic implementation:\n\n```python\ndef search_engine(search_query, data_source):\n    \"\"\"Returns items in data_source containing search_query\"\"\"\n    return [item for item in data_source if search_query in item]\n```\n\nThis function iterates through the `data_source` list and returns a new list with only those items which contain the `search_query` string. Do note, it is case sensitive and does not handle special characters, punctuation, etc. Also, it won't return results based on relevance or any similarity metric. \n\nAlthough this is a rather primitive example and wouldn't be of much use in a real-world application, it demonstrates the core concept of a search engine - scanning a database for a specific query. Real world search engines incorporate more complex algorithms, machine learning, natural language processing, databases, etc.", "tokens_used": 255}, {"purpose": "Plotting graphs for mathematical functions", "code": "Sure, here is a simple function that uses matplotlib to plot mathematical functions:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot_math_function(func, x_range):\n    \"\"\"\n    Plots a mathematical function.\n\n    Parameters: \n    func (function): the mathematical function to plot.\n    x_range (tuple): range for x values.\n\n    Returns:\n    plot: a matplotlib plot object.\n    \"\"\"\n    x = np.linspace(x_range[0], x_range[1], 1000)\n    y = func(x)\n    plt.figure()\n    plt.plot(x, y)\n    plt.grid()\n    plt.title('Plot of the mathematical function')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()\n\n# Example usage:\nplot_math_function(np.sin, (-10, 10))  # plot of sin(x) from -10 to 10\n```\n\nThis function `plot_math_function` takes two parameters: \n1. `func`: which is the mathematical function we want to plot. This can be any function that takes a single argument and produces a result. \n2. `x_range`: which is a tuple indicating the range of x values over which we want to plot the function.\n\nIn the example usage, the function plots the sine function over the range -10 to 10.\n\nPlease make sure, that numpy and matplotlib modules are installed in your environment. If not, you can install them using pip:\n\n```shell\npip install numpy matplotlib\n```", "tokens_used": 349}, {"purpose": "Predicting stock prices with a simple algorithm", "code": "Sure, here is a basic example of a function that uses a linear regression model to predict future stock prices. The actual prediction algorithm would require complex techniques and a variety of statistical tools. In real life, predicting stock prices is very difficult and should be done by professionals. Note that this is a very simplified example for learning purposes - it is not to be used for real stock trading. \n\nFor this example, I'm assuming your data is in a pandas DataFrame `df` with 'Date' and 'Close' columns.\n\n```python\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\n\n# Assuming df is your DataFrame and it includes 'Date' and 'Close' columns\ndef predict_stock_price(df):\n\n    # Convert date into number of days since the first date in the dataset\n    df['Date'] = (df['Date'] - df['Date'].min()) / np.timedelta64(1, 'D')\n\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(df['Date'].values.reshape(-1,1), df['Close'].values, test_size=0.2, random_state=42)\n\n    # Create and train the model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Use the model to predict the test dataset\n    predicted_prices = model.predict(X_test)\n\n    # Return the predictions\n    return predicted_prices\n```\n\nPlease replace `df` with your dataframe when you are going to use this function. Besides, this function will need the sklearn and pandas library, please make sure they are installed and imported when executing this function.\n\nAlso, concerning the data, stock prices are affected by a vast variety of factors, many of which cannot be accounted for by a simple algorithm. Even a sophisticated algorithm often generates many false predictions. Always balance algorithmic predictions with individual research and expert counsel.", "tokens_used": 453}, {"purpose": "Converting a string into Morse code", "code": "Sure, here is a Python function that you can use to convert a given string into Morse code. For this to work, I'm using a Python dictionary to map the English letters and numerals to Morse code. \n\n```python\ndef convert_to_morse(input_string):\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', \n                       'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', \n                       'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', \n                       'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---',\n                       '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', \n                       '9': '----.', '0': '-----', ' ': ' / '}\n\n    input_string = input_string.upper()  #- Convert to uppercase to match our dictionary keys\n    morse_code = \"\"\n\n    for char in input_string:\n        if char not in morse_code_dict:\n            morse_code += ' '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n\n    return morse_code\n\nprint(convert_to_morse(\"Hello world 123\"))\n```\nIn this code, we loop through the input string character by character. We then map each character to its Morse code equivalent using our dictionary. The Morse code for each letter is separated by a space, and there is a '/ ' slash between each word to provide clarity. The final Morse code string is then returned.", "tokens_used": 474}]